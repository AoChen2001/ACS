function [C_q,n] = create_C_q(k,q,EENum)
% create_C_q generate block matrix C_q
% k denotes the number of factors; EENum is the number of elementary effects needs to be generated for each factor by C_q

n = 0;
C_q = [];
% nee(q) denotes the number of additional elementary effects generated for each factor by adding C_q to (C_0;C_1;...;C_q-1)
nee = create_nee(k);
% construct C_q
if q == 1
    C_q = eye(k);
else
    % Here, C_t denotes dummy matrix C_q-1
    C_t = create_C_q(k,q-1,nee(q-1)); 
    % C_q_1_m denotes the dummy block matrix C_q-1,m' in C_q-1
    for j = 1:size(C_t,1)/k
        C_q_1_m = C_t((1+(j-1)*k):(j*k),:);
        % s_star denotes the column index of the last entry of ones in the first row of C_q-1,m'
        s_star = find(C_q_1_m(1,:),1,'last');
        % construct C_q,m
        for s = (s_star+1):k   
            if EENum <= n
                break;
            end
            % construct E_s
            E_s = create_E_s(k,s);
            % construct C_qm'
            C_qm = C_q_1_m + E_s;
            % determine if C_qm is duplicated with the previously generated sub-block matrix
            C_qm = deal_C_qm(C_qm,C_q);
            % add C_qm into C_q
            C_q = [C_q;C_qm];
            % calculate the additional elementary effects generated by the constructed C_qm
            if isempty(C_q)
                n = 0;
            else
                t = unique(C_q,'row');
                n = size(t,1)*q/k;
            end
        end        
    end
end
end

